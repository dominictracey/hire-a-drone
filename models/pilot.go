package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Pilot pilot
// swagger:model pilot
type Pilot struct {

	// address
	// Min Length: 1
	Address string `json:"Address,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"ID,omitempty"`

	// licensed
	Licensed bool `json:"Licensed,omitempty"`

	// name
	// Min Length: 1
	Name string `json:"Name,omitempty"`

	// phone
	// Min Length: 1
	Phone string `json:"Phone,omitempty"`
}

// Validate validates this pilot
func (m *Pilot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pilot) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if err := validate.MinLength("Address", "body", string(m.Address), 1); err != nil {
		return err
	}

	return nil
}

func (m *Pilot) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("Name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *Pilot) validatePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if err := validate.MinLength("Phone", "body", string(m.Phone), 1); err != nil {
		return err
	}

	return nil
}
