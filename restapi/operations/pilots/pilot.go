package pilots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PilotHandlerFunc turns a function with the right signature into a pilot handler
type PilotHandlerFunc func(PilotParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PilotHandlerFunc) Handle(params PilotParams) middleware.Responder {
	return fn(params)
}

// PilotHandler interface for that can handle valid pilot params
type PilotHandler interface {
	Handle(PilotParams) middleware.Responder
}

// NewPilot creates a new http.Handler for the pilot operation
func NewPilot(ctx *middleware.Context, handler PilotHandler) *Pilot_ {
	return &Pilot_{Context: ctx, Handler: handler}
}

/*Pilot_ swagger:route GET /pilot pilots pilot

get pilot

*/
type Pilot_ struct {
	Context *middleware.Context
	Handler PilotHandler
}

func (o *Pilot_) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPilotParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
