package pilots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dominictracey/rugby-scores/models"
)

// PilotOKCode is the HTTP code returned for type PilotOK
const PilotOKCode int = 200

/*PilotOK list the pilots

swagger:response pilotOK
*/
type PilotOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Pilot `json:"body,omitempty"`
}

// NewPilotOK creates PilotOK with default headers values
func NewPilotOK() *PilotOK {
	return &PilotOK{}
}

// WithPayload adds the payload to the pilot o k response
func (o *PilotOK) WithPayload(payload []*models.Pilot) *PilotOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pilot o k response
func (o *PilotOK) SetPayload(payload []*models.Pilot) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PilotOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Pilot, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*PilotDefault generic error response

swagger:response pilotDefault
*/
type PilotDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPilotDefault creates PilotDefault with default headers values
func NewPilotDefault(code int) *PilotDefault {
	if code <= 0 {
		code = 500
	}

	return &PilotDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the pilot default response
func (o *PilotDefault) WithStatusCode(code int) *PilotDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the pilot default response
func (o *PilotDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the pilot default response
func (o *PilotDefault) WithPayload(payload *models.Error) *PilotDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pilot default response
func (o *PilotDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PilotDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
