package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AuthInfoAuth0JwkHandlerFunc turns a function with the right signature into a auth info auth0 jwk handler
type AuthInfoAuth0JwkHandlerFunc func(AuthInfoAuth0JwkParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthInfoAuth0JwkHandlerFunc) Handle(params AuthInfoAuth0JwkParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// AuthInfoAuth0JwkHandler interface for that can handle valid auth info auth0 jwk params
type AuthInfoAuth0JwkHandler interface {
	Handle(AuthInfoAuth0JwkParams, interface{}) middleware.Responder
}

// NewAuthInfoAuth0Jwk creates a new http.Handler for the auth info auth0 jwk operation
func NewAuthInfoAuth0Jwk(ctx *middleware.Context, handler AuthInfoAuth0JwkHandler) *AuthInfoAuth0Jwk {
	return &AuthInfoAuth0Jwk{Context: ctx, Handler: handler}
}

/*AuthInfoAuth0Jwk swagger:route GET /auth/info/auth0 authInfoAuth0Jwk

Returns the requests' authentication information.

*/
type AuthInfoAuth0Jwk struct {
	Context *middleware.Context
	Handler AuthInfoAuth0JwkHandler
}

func (o *AuthInfoAuth0Jwk) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewAuthInfoAuth0JwkParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
