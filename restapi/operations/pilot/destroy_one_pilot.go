package pilot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"github.com/dominictracey/rugby-scores/models"
)

// DestroyOnePilotHandlerFunc turns a function with the right signature into a destroy one pilot handler
type DestroyOnePilotHandlerFunc func(DestroyOnePilotParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DestroyOnePilotHandlerFunc) Handle(params DestroyOnePilotParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DestroyOnePilotHandler interface for that can handle valid destroy one pilot params
type DestroyOnePilotHandler interface {
	Handle(DestroyOnePilotParams, *models.Principal) middleware.Responder
}

// NewDestroyOnePilot creates a new http.Handler for the destroy one pilot operation
func NewDestroyOnePilot(ctx *middleware.Context, handler DestroyOnePilotHandler) *DestroyOnePilot {
	return &DestroyOnePilot{Context: ctx, Handler: handler}
}

/*DestroyOnePilot swagger:route DELETE /pilot/{id} pilot destroyOnePilot

DestroyOnePilot destroy one pilot API

*/
type DestroyOnePilot struct {
	Context *middleware.Context
	Handler DestroyOnePilotHandler
}

func (o *DestroyOnePilot) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDestroyOnePilotParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
